/* Exercise 7-29. 지역클래스에서 외부클래스의 인스턴스멤버와 static멤버에 모두 접근할 수 있지만,
 * 지역변수는 final이 붙은 상수만 접근할 수 있는 이유는 무엇인가?
 *
 * [답]
 * (i)	메서드가 static인 경우
 *		지역클래스에서 외부클래스의 static멤버에 접근 가능
 *		지역클래스에서 외부클래스의 instance멤버에 접근 불가능 (만들어지지 않았을 수도 있으므로)
 *		(Ch07/Example/InnerEx3.java 참고)
 *
 * (ii)	메서드가 static이 아닌 경우
 *		지역클래스에서 외부클래스의 static멤버에 접근 가능
 *		지역클래스에서 외부클래스의 static멤버에 접근 가능
 *
 * (공통)
 * 지역클래스에서 지역변수는 final이 붙은 상수만 접근 가능
 * (JDK 1.8부터는 final이 안붙은 지역변수에 자동으로 final을 추가하며, 참조되는 지역변수를 변경하고자 하면 컴파일 에러 발생)
 * 지역클래스의 인스턴스가 생성돼서 Heap영역에 존재한다고 하자. (모든 인스턴스는 Heap영역에 생성)
 * 메서드 내의 변수는 Call Stack영역에 존재하다가 메서드가 수행을 마치면 메서드와 함께 소멸된다.
 * 그러면 Heap영역에 존재하는 지역클래스의 인스턴스는 소멸된 변수를 참조/대입하게 된다.
 * 한편, 메서드 내의 변수를 final 즉, 상수로 지정한다고 생각해보자.
 * 상수는 메서드 내에 존재하더라도 Method Area의 로드된 클래스 내 상수풀(Constant Pool)에 저장된다.
 * 이는 메서드가 수행을 마치고 Call Stack영역에서 소멸되더라도 Method Area에 여전히 남아있다.
 * 그러므로 지역클래스의 인스턴스는 이를 참조/대입 가능한 것이다.
 */